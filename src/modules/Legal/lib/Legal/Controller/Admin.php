<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */

class Legal_Controller_Admin extends Zikula_AbstractController
{
    /**
     * the main administration function
     *
     * This function is the default function, and is called whenever the
     * module is called without defining arguments.
     * As such it can be used for a number of things, but most commonly
     * it either just shows the module menu and returns or calls whatever
     * the module designer feels should be the default function (often this
     * is the view() function)
     *
     * @return       output       The main module admin page.
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission('legal::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Create a new output object
        $renderer = Zikula_View::getInstance($this->name, false);

        // Return the output that has been generated by this function
        return $renderer->fetch('legal_admin_main.tpl');
    }

    /**
     * Modify configuration
     *
     * This is a standard function to modify the configuration parameters of the
     * module
     *
     * @return       output       The configuration page
     */
    public function modifyconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission('legal::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // get all groups
        $groups = ModUtil::apiFunc('Groups', 'user', 'getall');

        // add dummy group "all groups" on top
        array_unshift($groups, array('gid' => 0, 'name' => $this->__('All users')));

        // add dummy group "no groups" on top
        array_unshift($groups, array('gid' => -1, 'name' => $this->__('No groups')));

        // Create output object
        $renderer = Zikula_View::getInstance('legal', false);

        // Assign all the module vars
        $renderer->assign(ModUtil::getVar('legal'));
        $renderer->assign('groups', $groups);

        // Return the output that has been generated by this function
        return $renderer->fetch('legal_admin_modifyconfig.tpl');
    }

    /**
     * Update the configuration
     *
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     * Modify configuration
     *
     * @param        termsofuse          enable terms of use
     * @param        privacypolicy       enable privacy policy
     * @param        accessibilitypolicy enable accessibility policy
     */
    public function updateconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm the forms authorisation key
        $this->checkCsrfToken();

        // set our module variables
        $legalNoticeActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_LEGALNOTICE_ACTIVE, true, 'POST');
        $this->setVar(Legal_Constant::MODVAR_LEGALNOTICE_ACTIVE, $legalNoticeActive);

        $termsOfUseActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_TERMS_ACTIVE, false, 'POST');
        $this->setVar(Legal_Constant::MODVAR_TERMS_ACTIVE, $termsOfUseActive);

        $privacyPolicyActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_PRIVACY_ACTIVE, false, 'POST');
        $this->setVar(Legal_Constant::MODVAR_PRIVACY_ACTIVE, $privacyPolicyActive);

        $accessibilityStmtActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_ACCESSIBILITY_ACTIVE, false, 'POST');
        $this->setVar(Legal_Constant::MODVAR_ACCESSIBILITY_ACTIVE, $accessibilityStmtActive);

        $tradeConditionsActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_TRADECONDITIONS_ACTIVE, false, 'POST');
        $this->setVar(Legal_Constant::MODVAR_TRADECONDITIONS_ACTIVE, $tradeConditionsActive);

        $cancellationRightPolicyActive = (bool)FormUtil::getPassedValue(Legal_Constant::MODVAR_CANCELLATIONRIGHTPOLICY_ACTIVE, false, 'POST');
        $this->setVar(Legal_Constant::MODVAR_CANCELLATIONRIGHTPOLICY_ACTIVE, $cancellationRightPolicyActive);


        $legalNoticeUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_LEGALNOTICE_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_LEGALNOTICE_URL, $legalNoticeUrl);

        $termsOfUseUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_TERMS_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_TERMS_URL, $termsOfUseUrl);

        $privacyPolicyUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_PRIVACY_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_PRIVACY_URL, $privacyPolicyUrl);

        $accessibilityStmtUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_ACCESSIBILITY_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_ACCESSIBILITY_URL, $accessibilityStmtUrl);

        $tradeConditionsUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_TRADECONDITIONS_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_TRADECONDITIONS_URL, $tradeConditionsUrl);

        $cancellationRightPolicyUrl = FormUtil::getPassedValue(Legal_Constant::MODVAR_CANCELLATIONRIGHTPOLICY_URL, '', 'POST');
        $this->setVar(Legal_Constant::MODVAR_CANCELLATIONRIGHTPOLICY_URL, $cancellationRightPolicyUrl);


        $minimumAge = (int)FormUtil::getPassedValue(Legal_Constant::MODVAR_MINIMUM_AGE, 0, 'POST');
        $this->setVar(Legal_Constant::MODVAR_MINIMUM_AGE, $minimumAge);

        $resetagreement = (int)FormUtil::getPassedValue('resetagreement', -1, 'POST');
        if ($resetagreement != -1) {
            ModUtil::apiFunc($this->name, 'admin', 'resetagreement', array('gid' => $resetagreement));
        }

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Saved module configuration.'));

        // This function generated no output, and so now it is complete we redirect
        // the user to an appropriate page for them to carry on their work
        return System::redirect(ModUtil::url($this->name, 'admin', 'main'));
    }
}